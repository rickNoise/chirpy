// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: chirps.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createChirp = `-- name: CreateChirp :one
INSERT INTO
    chirps (
        created_at,
        updated_at,
        body,
        user_id
    )
VALUES (NOW(), NOW(), $1, $2) RETURNING id, created_at, updated_at, body, user_id
`

type CreateChirpParams struct {
	Body   string
	UserID uuid.UUID
}

// creates a new chirp in the db tied to the creating user
func (q *Queries) CreateChirp(ctx context.Context, arg CreateChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, createChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const deleteChirpById = `-- name: DeleteChirpById :one
DELETE FROM chirps WHERE id = $1 RETURNING id, created_at, updated_at, body, user_id
`

// Deletes the chirp with the provided chirp id (uuid)
func (q *Queries) DeleteChirpById(ctx context.Context, chirpid uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, deleteChirpById, chirpid)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getAllChirps = `-- name: GetAllChirps :many
SELECT
    id,
    created_at,
    updated_at,
    body,
    user_id
FROM chirps
ORDER BY created_at ASC
`

// Retrieves all chirps in ascending order by created_at.
func (q *Queries) GetAllChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllChirpsByAuthorUserId = `-- name: GetAllChirpsByAuthorUserId :many
SELECT
    id,
    created_at,
    updated_at,
    body,
    user_id
FROM chirps
WHERE
    user_id = $1
ORDER BY created_at ASC
`

// Retrieves all chirps with a user_id matching the provided author user_id; in ascending order by created_at.
func (q *Queries) GetAllChirpsByAuthorUserId(ctx context.Context, userID uuid.UUID) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getAllChirpsByAuthorUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getChirp = `-- name: GetChirp :one
SELECT
    id,
    created_at,
    updated_at,
    body,
    user_id
FROM chirps
WHERE
    id = $1
`

// Retrieves a single chirp based on provided chirp id.
func (q *Queries) GetChirp(ctx context.Context, chirpid uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirp, chirpid)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}
