// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (
        created_at,
        updated_at,
        email,
        hashed_password
    )
VALUES (
        NOW(),
        NOW(),
        $1,
        $2
    ) RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	Hashedpassword string
}

// id PK for users has a default UUID generated, so can leave out here
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Hashedpassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

// deletes all users data in the users table
func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id,
    created_at,
    updated_at,
    email,
    hashed_password
FROM users
WHERE
    email = $1
`

type GetUserByEmailRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	HashedPassword string
}

func (q *Queries) GetUserByEmail(ctx context.Context, useremail string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, useremail)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const updateEmailAndPasswordByUserId = `-- name: UpdateEmailAndPasswordByUserId :one
UPDATE users
SET
    updated_at = NOW(),
    email = $1,
    hashed_password = $2
WHERE
    id = $3 RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type UpdateEmailAndPasswordByUserIdParams struct {
	Newemail          string
	Newhashedpassword string
	Userid            uuid.UUID
}

// updates a user record with a new hashed password and email address
func (q *Queries) UpdateEmailAndPasswordByUserId(ctx context.Context, arg UpdateEmailAndPasswordByUserIdParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateEmailAndPasswordByUserId, arg.Newemail, arg.Newhashedpassword, arg.Userid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const upgradeUserToChirpyRedById = `-- name: UpgradeUserToChirpyRedById :one
UPDATE users
SET
    updated_at = NOW(),
    is_chirpy_red = TRUE
WHERE
    id = $1 RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

// upgrades a user to chirpy red based on their ID by modifying the is_chirpy_field to true.
func (q *Queries) UpgradeUserToChirpyRedById(ctx context.Context, userid uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, upgradeUserToChirpyRedById, userid)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}
